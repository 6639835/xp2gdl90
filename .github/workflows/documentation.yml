name: Documentation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.md'
      - 'Doxyfile'
      - 'docs/**'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - '*.md'
      - 'Doxyfile'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      deploy_docs:
        description: 'Deploy documentation to GitHub Pages'
        type: boolean
        default: true

permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install documentation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz
        pip install sphinx breathe sphinx-rtd-theme myst-parser markdown
    
    - name: Validate Doxyfile
      run: |
        echo "Validating Doxygen configuration..."
        doxygen -s -g - > /dev/null
        echo "‚úÖ Doxyfile syntax is valid"
    
    - name: Generate API documentation with Doxygen
      run: |
        echo "Generating API documentation..."
        
        # Create output directory
        mkdir -p build/docs
        
        # Generate documentation
        doxygen Doxyfile
        
        # Check if documentation was generated
        if [ ! -d "build/docs/html" ]; then
          echo "‚ùå Doxygen failed to generate documentation"
          ls -la build/docs/ || echo "Build directory contents not available"
          exit 1
        fi
        
        echo "‚úÖ API documentation generated successfully"
        
        # Count generated files
        HTML_COUNT=$(find build/docs/html -name "*.html" | wc -l)
        echo "‚úÖ Generated $HTML_COUNT HTML files"
        
        # Verify main files exist
        if [ ! -f "build/docs/html/index.html" ]; then
          echo "‚ùå Main index.html not generated"
          exit 1
        fi
    
    - name: Create documentation index
      run: |
        mkdir -p docs/site
        
        # Get dynamic values for the documentation
        VERSION=$(cat VERSION 2>/dev/null || echo "unknown")
        BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S')
        COMMIT_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        
        echo "üìä Documentation build info:"
        echo "   Version: $VERSION"
        echo "   Build date: $BUILD_DATE UTC"  
        echo "   Commit: $COMMIT_HASH"
        
        cat > docs/site/index.html << EOF
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>XP2GDL90 Plugin Documentation</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                    line-height: 1.6;
                }
                .header {
                    text-align: center;
                    border-bottom: 2px solid #007acc;
                    padding-bottom: 20px;
                    margin-bottom: 30px;
                }
                .doc-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }
                .doc-card {
                    border: 1px solid #ddd;
                    border-radius: 8px;
                    padding: 20px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    transition: transform 0.2s;
                }
                .doc-card:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
                }
                .doc-card h3 {
                    margin-top: 0;
                    color: #007acc;
                }
                .doc-card a {
                    color: #007acc;
                    text-decoration: none;
                    font-weight: 500;
                }
                .doc-card a:hover {
                    text-decoration: underline;
                }
                .version-info {
                    background: #f8f9fa;
                    padding: 15px;
                    border-radius: 5px;
                    margin: 20px 0;
                    border-left: 4px solid #007acc;
                }
                .footer {
                    text-align: center;
                    margin-top: 50px;
                    padding-top: 20px;
                    border-top: 1px solid #ddd;
                    color: #666;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üõ©Ô∏è XP2GDL90 Plugin Documentation</h1>
                <p>Complete documentation for the X-Plane GDL-90 Broadcasting Plugin</p>
            </div>
        
            <div class="version-info">
                <strong>üì¶ Version:</strong> $VERSION | 
                <strong>üîß Built:</strong> $BUILD_DATE UTC |
                <strong>üìù Commit:</strong> $COMMIT_HASH
            </div>
        
            <div class="doc-grid">
                <div class="doc-card">
                    <h3>üìñ API Documentation</h3>
                    <p>Complete API reference generated from source code comments</p>
                    <a href="api/index.html">Browse API Docs ‚Üí</a>
                </div>
        
                <div class="doc-card">
                    <h3>üöÄ Quick Start</h3>
                    <p>Installation guide and basic usage instructions</p>
                    <a href="guide/README.html">Get Started ‚Üí</a>
                </div>
        
                <div class="doc-card">
                    <h3>üîß Development</h3>
                    <p>Contributing guidelines and development setup</p>
                    <a href="guide/CONTRIBUTING.html">Contribute ‚Üí</a>
                </div>
        
                <div class="doc-card">
                    <h3>üìã Changelog</h3>
                    <p>Version history and release notes</p>
                    <a href="guide/CHANGELOG.html">View Changes ‚Üí</a>
                </div>
        
                <div class="doc-card">
                    <h3>üîí Security</h3>
                    <p>Security policy and vulnerability reporting</p>
                    <a href="guide/SECURITY.html">Security Info ‚Üí</a>
                </div>
        
                <div class="doc-card">
                    <h3>üß™ Test Coverage</h3>
                    <p>Unit test results and coverage reports</p>
                    <a href="coverage/index.html">View Coverage ‚Üí</a>
                </div>
            </div>
        
            <div class="footer">
                <p>Generated automatically from the XP2GDL90 source code</p>
                <p>¬© 2024 XP2GDL90 Contributors | MIT License</p>
            </div>
        </body>
        </html>
        EOF
    
    - name: Copy API documentation
      run: |
        # Copy Doxygen output to site
        cp -r build/docs/html docs/site/api
        
        # Convert markdown files to HTML for easy browsing
        mkdir -p docs/site/guide
        
        python3 << 'EOF'
        import markdown
        import os
        from pathlib import Path
        
        # Convert markdown files to HTML
        md_files = ['README.md', 'CHANGELOG.md', 'CONTRIBUTING.md', 'SECURITY.md']
        
        for md_file in md_files:
            if os.path.exists(md_file):
                with open(md_file, 'r') as f:
                    content = f.read()
                
                # Convert to HTML
                html = markdown.markdown(content, extensions=['codehilite', 'fenced_code'])
                
                # Wrap in template
                html_content = f'''
        <!DOCTYPE html>
        <html>
        <head>
            <title>{md_file} - XP2GDL90</title>
            <meta charset="UTF-8">
            <style>
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                    line-height: 1.6;
                }}
                pre {{ background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }}
                code {{ background: #f8f9fa; padding: 2px 4px; border-radius: 3px; }}
                h1, h2, h3 {{ color: #007acc; }}
                a {{ color: #007acc; }}
            </style>
        </head>
        <body>
            <nav><a href="../index.html">‚Üê Back to Documentation</a></nav>
            {html}
        </body>
        </html>
                '''
                
                output_file = f"docs/site/guide/{md_file.replace('.md', '.html')}"
                with open(output_file, 'w') as f:
                    f.write(html_content)
                
                print(f"Converted {md_file} to {output_file}")
        EOF
    
    - name: Generate documentation statistics
      run: |
        echo "Generating documentation statistics..."
        
        # Count various documentation elements
        HTML_FILES=$(find docs/site -name "*.html" | wc -l)
        API_FILES=$(find docs/site/api -name "*.html" | wc -l)
        TOTAL_SIZE=$(du -sh docs/site | cut -f1)
        
        # Generate build statistics
        FULL_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
        ISO_DATE=$(date -u -Iseconds)
        
        cat > docs/site/stats.json << EOF
        {
          "generated_at": "$ISO_DATE",
          "commit": "$FULL_COMMIT", 
          "version": "$VERSION",
          "stats": {
            "total_html_files": $HTML_FILES,
            "api_files": $API_FILES,
            "total_size": "$TOTAL_SIZE"
          }
        }
        EOF
        
        echo "üìä Documentation Statistics:"
        echo "  HTML files: $HTML_FILES"
        echo "  API files: $API_FILES" 
        echo "  Total size: $TOTAL_SIZE"
    
    - name: Validate generated documentation
      run: |
        echo "Validating generated documentation..."
        
        # Check for required files
        required_files=(
          "docs/site/index.html"
          "docs/site/api/index.html"
          "docs/site/guide/README.html"
          "docs/site/stats.json"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Required file missing: $file"
            exit 1
          fi
        done
        
        # Check for broken internal links (basic check)
        if grep -r "href=\"[^http]" docs/site --include="*.html" | grep -v "mailto:"; then
          echo "‚ö†Ô∏è  Found relative links - verify they work correctly"
        fi
        
        echo "‚úÖ Documentation validation passed"
    
    - name: Setup Pages
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.deploy_docs == 'true')
      uses: actions/configure-pages@v4
      continue-on-error: true
      id: setup_pages
    
    - name: Upload documentation artifact
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/site/
        retention-days: 30
    
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.deploy_docs == 'true') && steps.setup_pages.outcome == 'success'
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/site/
    
    - name: Pages Setup Status
      if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.deploy_docs == 'true')
      run: |
        if [ "${{ steps.setup_pages.outcome }}" != "success" ]; then
          echo "‚ö†Ô∏è  GitHub Pages not configured for this repository"
          echo "To enable GitHub Pages deployment:"
          echo "1. Go to repository Settings"
          echo "2. Navigate to Pages section"  
          echo "3. Set source to 'GitHub Actions'"
          echo "4. Re-run this workflow"
          echo ""
          echo "üìÑ Documentation is still available as workflow artifact"
        else
          echo "‚úÖ GitHub Pages configured successfully"
        fi

  deploy-docs:
    name: Deploy Documentation
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.inputs.deploy_docs == 'true') && needs.build-docs.result == 'success'
    needs: build-docs
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Check Pages Setup
      run: |
        echo "Attempting to deploy to GitHub Pages..."
        echo "If this fails, GitHub Pages may not be enabled for this repository."
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      continue-on-error: true
    
    - name: Deployment Status
      run: |
        if [ "${{ steps.deployment.outcome }}" == "success" ]; then
          echo "‚úÖ Successfully deployed to GitHub Pages"
          echo "üåê URL: ${{ steps.deployment.outputs.page_url }}"
        else
          echo "‚ö†Ô∏è  Failed to deploy to GitHub Pages"
          echo "This is likely because GitHub Pages is not enabled for this repository."
          echo ""
          echo "To enable GitHub Pages:"
          echo "1. Go to repository Settings"
          echo "2. Navigate to Pages section"
          echo "3. Set source to 'GitHub Actions'"
          echo "4. Re-run this workflow"
          echo ""
          echo "üìÑ Documentation is available as a workflow artifact in the meantime."
        fi

  doc-link-check:
    name: Check Documentation Links
    needs: build-docs
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: docs/
    
    - name: Install link checker
      run: |
        npm install -g markdown-link-check
    
    - name: Check documentation links
      run: |
        echo "Checking documentation for broken links..."
        
        # Check markdown files in repository
        if [ -f "README.md" ]; then
          markdown-link-check README.md --config .github/markdown-link-config.json || true
        fi
        
        if [ -f "CONTRIBUTING.md" ]; then
          markdown-link-check CONTRIBUTING.md --config .github/markdown-link-config.json || true
        fi
        
        echo "‚úÖ Link check completed"
    
    - name: Comment on PR with documentation preview
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üìö Documentation Preview
          
          The documentation has been built successfully for this PR.
          
          **üìä Documentation Statistics:**
          - Built at: ${new Date().toISOString()}
          - Commit: ${context.sha.substring(0, 8)}
          
          **üîó Quick Links:**
          - [View Documentation Artifact](${context.server_url}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          
          The documentation will be automatically deployed to GitHub Pages when this PR is merged to main.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  doc-summary:
    name: Documentation Summary
    needs: [build-docs, deploy-docs]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create documentation summary
      run: |
        cat >> $GITHUB_STEP_SUMMARY << 'EOF'
        # üìö Documentation Build Summary
        
        ## Build Status
        EOF
        
        if [ "${{ needs.build-docs.result }}" == "success" ]; then
          echo "‚úÖ **Documentation Build**: Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Documentation Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-docs.result }}" == "success" ]; then
          echo "‚úÖ **GitHub Pages Deploy**: Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Live Documentation**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-docs.result }}" == "skipped" ]; then
          echo "‚è≠Ô∏è **GitHub Pages Deploy**: Skipped (not main branch)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **GitHub Pages Deploy**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Generated Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- üìñ API Documentation (Doxygen)" >> $GITHUB_STEP_SUMMARY
        echo "- üìã Project README" >> $GITHUB_STEP_SUMMARY
        echo "- üîß Contributing Guide" >> $GITHUB_STEP_SUMMARY
        echo "- üìù Changelog" >> $GITHUB_STEP_SUMMARY
        echo "- üîí Security Policy" >> $GITHUB_STEP_SUMMARY
